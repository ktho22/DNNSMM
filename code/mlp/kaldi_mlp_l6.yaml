!obj:pylearn2.train.Train {
    dataset: &train !obj:DNNSMM.datasets.kaldi_timit.TIMIT {
        which_set: 'train',
        start: 0,
        stop: %(train_stop)s,
        framesize: &fs %(framesize)i
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: &dim %(dim_h0)i,
                     irange: .05,
                     max_col_norm: 1.9365,
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h1',
                     dim: *dim,
                     irange: .05,
                     max_col_norm: 1.9365,
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h2',
                     dim: *dim,
                     irange: .05,
                     max_col_norm: 1.9365,
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h3',
                     dim: *dim,
                     irange: .05,
                     max_col_norm: 1.9365,
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h4',
                     dim: *dim,
                     irange: .05,
                     max_col_norm: 1.9365,
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h5',
                     dim: *dim,
                     irange: .05,
                     max_col_norm: 1.9365,
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 144,
                     irange: 0.
                 }
                ],
        nvis: %(nvis)i,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: .0001,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:DNNSMM.datasets.kaldi_timit.TIMIT {
                              which_set: 'train',
                              start: %(valid_start)s,
                              stop: %(valid_stop)s,
                              framesize: *fs
                          },
                'test'  : !obj:DNNSMM.datasets.kaldi_timit.TIMIT {
                              which_set: 'train',
                              start: %(test_start)s,
                              stop: %(test_stop)s,
                              framesize: *fs
                          }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.mlp.Default {
            }, !obj:pylearn2.costs.mlp.WeightDecay {
                coeffs: [ .00005, .00005, .00005, .00005, .00005, .00005, .00005]
            }, !obj:pylearn2.costs.mlp.dropout.Dropout {
                input_include_probs: { h0: 0.5, h1: 0.5}
            }
            ]
        },
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.AdaDelta {
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.,
                    N: 10
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                }
            ]
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(best_save_path)s"
        }
    ],
    save_freq: 1,
    save_path: '%(save_path)s'
}
